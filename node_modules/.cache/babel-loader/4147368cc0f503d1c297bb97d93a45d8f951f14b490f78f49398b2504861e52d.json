{"ast":null,"code":"import swal from \"sweetalert2\";\nimport FullCalendar from \"@fullcalendar/vue\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nconst today = new Date();\nconst y = today.getFullYear();\nconst m = today.getMonth();\nconst d = today.getDate();\nexport default {\n  components: {\n    FullCalendar\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin // needed for dateClick\n        ],\n        headerToolbar: {\n          center: \"dayGridMonth,timeGridWeek,timeGridDay\",\n          right: \"prev,next,today\"\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS,\n        // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents\n      },\n      currentEvents: []\n    };\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    handleDateSelect(selectInfo) {\n      // on select we show the Sweet Alert modal with an input\n      const swalWithBootstrapButtons = swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-success btn-fill\",\n          cancelButton: \"btn btn-danger btn-fill\"\n        },\n        buttonsStyling: false\n      });\n      swalWithBootstrapButtons.fire({\n        title: \"Create an Event\",\n        html: `<div class=\"md-field md-theme-default\">\n          <input type=\"text\" id=\"md-input\" class=\"md-input\">\n          </div>`,\n        showCancelButton: true\n      }).then(() => {\n        var title = document.getElementById(\"md-input\").value;\n        let calendarApi = selectInfo.view.calendar;\n        calendarApi.unselect(); // clear date selection\n        if (title) {\n          calendarApi.addEvent({\n            id: createEventId(),\n            title,\n            start: selectInfo.startStr,\n            end: selectInfo.endStr,\n            allDay: selectInfo.allDay\n          });\n        }\n      });\n    },\n    handleEventClick(clickInfo) {\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events;\n    }\n  }\n};","map":{"version":3,"names":["swal","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","INITIAL_EVENTS","createEventId","today","Date","y","getFullYear","m","getMonth","d","getDate","components","data","calendarOptions","plugins","headerToolbar","center","right","initialView","initialEvents","editable","selectable","select","handleDateSelect","eventClick","handleEventClick","eventsSet","handleEvents","currentEvents","methods","handleWeekendsToggle","weekends","selectInfo","swalWithBootstrapButtons","mixin","customClass","confirmButton","cancelButton","buttonsStyling","fire","title","html","showCancelButton","then","document","getElementById","value","calendarApi","view","calendar","unselect","addEvent","id","start","startStr","end","endStr","allDay","clickInfo","confirm","event","remove","events"],"sources":["src/pages/Calendar/Calendar.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid\">\n    <div class=\"row\">\n      <div class=\"col-12\">\n        <fullCalendar ref=\"calendar\" :options=\"calendarOptions\" />\n      </div>\n    </div>\n  </div>\n</template>\n<script>\nimport swal from \"sweetalert2\";\nimport FullCalendar from \"@fullcalendar/vue\";\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\nimport { INITIAL_EVENTS, createEventId } from \"./event-utils\";\nconst today = new Date();\nconst y = today.getFullYear();\nconst m = today.getMonth();\nconst d = today.getDate();\nexport default {\n  components: {\n    FullCalendar,\n  },\n  data() {\n    return {\n      calendarOptions: {\n        plugins: [\n          dayGridPlugin,\n          timeGridPlugin,\n          interactionPlugin, // needed for dateClick\n        ],\n        headerToolbar: {\n          center: \"dayGridMonth,timeGridWeek,timeGridDay\",\n          right: \"prev,next,today\",\n        },\n        initialView: \"dayGridMonth\",\n        initialEvents: INITIAL_EVENTS, // alternatively, use the `events` setting to fetch from a feed\n        editable: true,\n        selectable: true,\n        select: this.handleDateSelect,\n        eventClick: this.handleEventClick,\n        eventsSet: this.handleEvents,\n      },\n      currentEvents: [],\n    };\n  },\n  methods: {\n    handleWeekendsToggle() {\n      this.calendarOptions.weekends = !this.calendarOptions.weekends; // update a property\n    },\n    handleDateSelect(selectInfo) {\n      // on select we show the Sweet Alert modal with an input\n      const swalWithBootstrapButtons = swal.mixin({\n        customClass: {\n          confirmButton: \"btn btn-success btn-fill\",\n          cancelButton: \"btn btn-danger btn-fill\",\n        },\n        buttonsStyling: false,\n      });\n      swalWithBootstrapButtons\n        .fire({\n          title: \"Create an Event\",\n          html: `<div class=\"md-field md-theme-default\">\n          <input type=\"text\" id=\"md-input\" class=\"md-input\">\n          </div>`,\n          showCancelButton: true,\n        })\n        .then(() => {\n          var title = document.getElementById(\"md-input\").value;\n          let calendarApi = selectInfo.view.calendar;\n          calendarApi.unselect(); // clear date selection\n          if (title) {\n            calendarApi.addEvent({\n              id: createEventId(),\n              title,\n              start: selectInfo.startStr,\n              end: selectInfo.endStr,\n              allDay: selectInfo.allDay,\n            });\n          }\n        });\n    },\n    handleEventClick(clickInfo) {\n      if (\n        confirm(\n          `Are you sure you want to delete the event '${clickInfo.event.title}'`\n        )\n      ) {\n        clickInfo.event.remove();\n      }\n    },\n    handleEvents(events) {\n      this.currentEvents = events;\n    },\n  },\n};\n</script>\n<style>\n#fullCalendar {\n  min-height: 400px;\n}\n\n.el-loading-spinner .path {\n  stroke: #66615b !important;\n}\n</style>\n"],"mappings":"AAUA,OAAAA,IAAA;AACA,OAAAC,YAAA;AACA,OAAAC,aAAA;AACA,OAAAC,cAAA;AACA,OAAAC,iBAAA;AACA,SAAAC,cAAA,EAAAC,aAAA;AACA,MAAAC,KAAA,OAAAC,IAAA;AACA,MAAAC,CAAA,GAAAF,KAAA,CAAAG,WAAA;AACA,MAAAC,CAAA,GAAAJ,KAAA,CAAAK,QAAA;AACA,MAAAC,CAAA,GAAAN,KAAA,CAAAO,OAAA;AACA;EACAC,UAAA;IACAd;EACA;EACAe,KAAA;IACA;MACAC,eAAA;QACAC,OAAA,GACAhB,aAAA,EACAC,cAAA,EACAC,iBAAA;QAAA,CACA;QACAe,aAAA;UACAC,MAAA;UACAC,KAAA;QACA;QACAC,WAAA;QACAC,aAAA,EAAAlB,cAAA;QAAA;QACAmB,QAAA;QACAC,UAAA;QACAC,MAAA,OAAAC,gBAAA;QACAC,UAAA,OAAAC,gBAAA;QACAC,SAAA,OAAAC;MACA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACAC,qBAAA;MACA,KAAAjB,eAAA,CAAAkB,QAAA,SAAAlB,eAAA,CAAAkB,QAAA;IACA;IACAR,iBAAAS,UAAA;MACA;MACA,MAAAC,wBAAA,GAAArC,IAAA,CAAAsC,KAAA;QACAC,WAAA;UACAC,aAAA;UACAC,YAAA;QACA;QACAC,cAAA;MACA;MACAL,wBAAA,CACAM,IAAA;QACAC,KAAA;QACAC,IAAA;AACA;AACA;QACAC,gBAAA;MACA,GACAC,IAAA;QACA,IAAAH,KAAA,GAAAI,QAAA,CAAAC,cAAA,aAAAC,KAAA;QACA,IAAAC,WAAA,GAAAf,UAAA,CAAAgB,IAAA,CAAAC,QAAA;QACAF,WAAA,CAAAG,QAAA;QACA,IAAAV,KAAA;UACAO,WAAA,CAAAI,QAAA;YACAC,EAAA,EAAAlD,aAAA;YACAsC,KAAA;YACAa,KAAA,EAAArB,UAAA,CAAAsB,QAAA;YACAC,GAAA,EAAAvB,UAAA,CAAAwB,MAAA;YACAC,MAAA,EAAAzB,UAAA,CAAAyB;UACA;QACA;MACA;IACA;IACAhC,iBAAAiC,SAAA;MACA,IACAC,OAAA,CACA,8CAAAD,SAAA,CAAAE,KAAA,CAAApB,KAAA,GACA,GACA;QACAkB,SAAA,CAAAE,KAAA,CAAAC,MAAA;MACA;IACA;IACAlC,aAAAmC,MAAA;MACA,KAAAlC,aAAA,GAAAkC,MAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}