{"ast":null,"code":"export default {\n  name: \"base-pagination\",\n  props: {\n    type: {\n      type: String,\n      default: \"primary\",\n      validator: value => {\n        return [\"default\", \"primary\", \"danger\", \"success\", \"warning\", \"info\"].includes(value);\n      }\n    },\n    pageCount: {\n      type: Number,\n      default: 0\n    },\n    perPage: {\n      type: Number,\n      default: 10\n    },\n    showArrows: {\n      type: Boolean,\n      default: true\n    },\n    total: {\n      type: Number,\n      default: 0\n    },\n    value: {\n      type: Number,\n      default: 1\n    },\n    pagesToDisplay: {\n      type: Number,\n      default: 5\n    }\n  },\n  computed: {\n    paginationClass() {\n      return `pagination-${this.type}`;\n    },\n    totalPages() {\n      if (this.pageCount > 0) return this.pageCount;\n      if (this.total > 0) {\n        return Math.ceil(this.total / this.perPage);\n      }\n      return 1;\n    },\n    defaultPagesToDisplay() {\n      if (this.totalPages > 0 && this.totalPages < this.pagesToDisplay) {\n        return this.totalPages;\n      }\n      return this.pagesToDisplay;\n    },\n    minPage() {\n      if (this.value >= this.defaultPagesToDisplay) {\n        const pagesToAdd = Math.floor(this.defaultPagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage > this.totalPages) {\n          return this.totalPages - this.defaultPagesToDisplay + 1;\n        }\n        return this.value - pagesToAdd;\n      } else {\n        return 1;\n      }\n    },\n    maxPage() {\n      if (this.value >= this.defaultPagesToDisplay) {\n        const pagesToAdd = Math.floor(this.defaultPagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage < this.totalPages) {\n          return newMaxPage;\n        } else {\n          return this.totalPages;\n        }\n      } else {\n        return this.defaultPagesToDisplay;\n      }\n    }\n  },\n  methods: {\n    range(min, max) {\n      let arr = [];\n      for (let i = min; i <= max; i++) {\n        arr.push(i);\n      }\n      return arr;\n    },\n    changePage(item) {\n      this.$emit(\"input\", item);\n    },\n    nextPage() {\n      if (this.value < this.totalPages) {\n        this.$emit(\"input\", this.value + 1);\n      }\n    },\n    prevPage() {\n      if (this.value > 1) {\n        this.$emit(\"input\", this.value - 1);\n      }\n    }\n  },\n  watch: {\n    perPage() {\n      this.$emit(\"input\", 1);\n    },\n    total() {\n      this.$emit(\"input\", 1);\n    }\n  }\n};","map":{"version":3,"names":["name","props","type","String","default","validator","value","includes","pageCount","Number","perPage","showArrows","Boolean","total","pagesToDisplay","computed","paginationClass","totalPages","Math","ceil","defaultPagesToDisplay","minPage","pagesToAdd","floor","newMaxPage","maxPage","methods","range","min","max","arr","i","push","changePage","item","$emit","nextPage","prevPage","watch"],"sources":["src/components/BasePagination.vue"],"sourcesContent":["<template>\n  <ul class=\"pagination\" :class=\"paginationClass\">\n    <li\n      class=\"page-item prev-page\"\n      v-if=\"showArrows\"\n      :class=\"{ disabled: value === 1 }\"\n    >\n      <a class=\"page-link\" aria-label=\"Previous\" @click=\"prevPage\">\n        <i class=\"tim-icons icon-double-left\" aria-hidden=\"true\"></i>\n      </a>\n    </li>\n    <li\n      class=\"page-item\"\n      v-for=\"item in range(minPage, maxPage)\"\n      :key=\"item\"\n      :class=\"{ active: value === item }\"\n    >\n      <a class=\"page-link\" @click=\"changePage(item)\">{{ item }}</a>\n    </li>\n    <li\n      v-if=\"showArrows\"\n      class=\"page-item page-pre next-page\"\n      :class=\"{ disabled: value === totalPages }\"\n    >\n      <a class=\"page-link\" aria-label=\"Next\" @click=\"nextPage\">\n        <i class=\"tim-icons icon-double-right\" aria-hidden=\"true\"></i>\n      </a>\n    </li>\n  </ul>\n</template>\n<script>\nexport default {\n  name: \"base-pagination\",\n  props: {\n    type: {\n      type: String,\n      default: \"primary\",\n      validator: (value) => {\n        return [\n          \"default\",\n          \"primary\",\n          \"danger\",\n          \"success\",\n          \"warning\",\n          \"info\",\n        ].includes(value);\n      },\n    },\n    pageCount: {\n      type: Number,\n      default: 0,\n    },\n    perPage: {\n      type: Number,\n      default: 10,\n    },\n    showArrows: {\n      type: Boolean,\n      default: true,\n    },\n    total: {\n      type: Number,\n      default: 0,\n    },\n    value: {\n      type: Number,\n      default: 1,\n    },\n    pagesToDisplay: {\n      type: Number,\n      default: 5,\n    },\n  },\n  computed: {\n    paginationClass() {\n      return `pagination-${this.type}`;\n    },\n    totalPages() {\n      if (this.pageCount > 0) return this.pageCount;\n      if (this.total > 0) {\n        return Math.ceil(this.total / this.perPage);\n      }\n      return 1;\n    },\n    defaultPagesToDisplay() {\n      if (this.totalPages > 0 && this.totalPages < this.pagesToDisplay) {\n        return this.totalPages;\n      }\n      return this.pagesToDisplay;\n    },\n    minPage() {\n      if (this.value >= this.defaultPagesToDisplay) {\n        const pagesToAdd = Math.floor(this.defaultPagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage > this.totalPages) {\n          return this.totalPages - this.defaultPagesToDisplay + 1;\n        }\n        return this.value - pagesToAdd;\n      } else {\n        return 1;\n      }\n    },\n    maxPage() {\n      if (this.value >= this.defaultPagesToDisplay) {\n        const pagesToAdd = Math.floor(this.defaultPagesToDisplay / 2);\n        const newMaxPage = pagesToAdd + this.value;\n        if (newMaxPage < this.totalPages) {\n          return newMaxPage;\n        } else {\n          return this.totalPages;\n        }\n      } else {\n        return this.defaultPagesToDisplay;\n      }\n    },\n  },\n  methods: {\n    range(min, max) {\n      let arr = [];\n      for (let i = min; i <= max; i++) {\n        arr.push(i);\n      }\n      return arr;\n    },\n    changePage(item) {\n      this.$emit(\"input\", item);\n    },\n    nextPage() {\n      if (this.value < this.totalPages) {\n        this.$emit(\"input\", this.value + 1);\n      }\n    },\n    prevPage() {\n      if (this.value > 1) {\n        this.$emit(\"input\", this.value - 1);\n      }\n    },\n  },\n  watch: {\n    perPage() {\n      this.$emit(\"input\", 1);\n    },\n    total() {\n      this.$emit(\"input\", 1);\n    },\n  },\n};\n</script>\n"],"mappings":"AA+BA;EACAA,IAAA;EACAC,KAAA;IACAC,IAAA;MACAA,IAAA,EAAAC,MAAA;MACAC,OAAA;MACAC,SAAA,EAAAC,KAAA;QACA,QACA,WACA,WACA,UACA,WACA,WACA,OACA,CAAAC,QAAA,CAAAD,KAAA;MACA;IACA;IACAE,SAAA;MACAN,IAAA,EAAAO,MAAA;MACAL,OAAA;IACA;IACAM,OAAA;MACAR,IAAA,EAAAO,MAAA;MACAL,OAAA;IACA;IACAO,UAAA;MACAT,IAAA,EAAAU,OAAA;MACAR,OAAA;IACA;IACAS,KAAA;MACAX,IAAA,EAAAO,MAAA;MACAL,OAAA;IACA;IACAE,KAAA;MACAJ,IAAA,EAAAO,MAAA;MACAL,OAAA;IACA;IACAU,cAAA;MACAZ,IAAA,EAAAO,MAAA;MACAL,OAAA;IACA;EACA;EACAW,QAAA;IACAC,gBAAA;MACA,0BAAAd,IAAA;IACA;IACAe,WAAA;MACA,SAAAT,SAAA,kBAAAA,SAAA;MACA,SAAAK,KAAA;QACA,OAAAK,IAAA,CAAAC,IAAA,MAAAN,KAAA,QAAAH,OAAA;MACA;MACA;IACA;IACAU,sBAAA;MACA,SAAAH,UAAA,aAAAA,UAAA,QAAAH,cAAA;QACA,YAAAG,UAAA;MACA;MACA,YAAAH,cAAA;IACA;IACAO,QAAA;MACA,SAAAf,KAAA,SAAAc,qBAAA;QACA,MAAAE,UAAA,GAAAJ,IAAA,CAAAK,KAAA,MAAAH,qBAAA;QACA,MAAAI,UAAA,GAAAF,UAAA,QAAAhB,KAAA;QACA,IAAAkB,UAAA,QAAAP,UAAA;UACA,YAAAA,UAAA,QAAAG,qBAAA;QACA;QACA,YAAAd,KAAA,GAAAgB,UAAA;MACA;QACA;MACA;IACA;IACAG,QAAA;MACA,SAAAnB,KAAA,SAAAc,qBAAA;QACA,MAAAE,UAAA,GAAAJ,IAAA,CAAAK,KAAA,MAAAH,qBAAA;QACA,MAAAI,UAAA,GAAAF,UAAA,QAAAhB,KAAA;QACA,IAAAkB,UAAA,QAAAP,UAAA;UACA,OAAAO,UAAA;QACA;UACA,YAAAP,UAAA;QACA;MACA;QACA,YAAAG,qBAAA;MACA;IACA;EACA;EACAM,OAAA;IACAC,MAAAC,GAAA,EAAAC,GAAA;MACA,IAAAC,GAAA;MACA,SAAAC,CAAA,GAAAH,GAAA,EAAAG,CAAA,IAAAF,GAAA,EAAAE,CAAA;QACAD,GAAA,CAAAE,IAAA,CAAAD,CAAA;MACA;MACA,OAAAD,GAAA;IACA;IACAG,WAAAC,IAAA;MACA,KAAAC,KAAA,UAAAD,IAAA;IACA;IACAE,SAAA;MACA,SAAA9B,KAAA,QAAAW,UAAA;QACA,KAAAkB,KAAA,eAAA7B,KAAA;MACA;IACA;IACA+B,SAAA;MACA,SAAA/B,KAAA;QACA,KAAA6B,KAAA,eAAA7B,KAAA;MACA;IACA;EACA;EACAgC,KAAA;IACA5B,QAAA;MACA,KAAAyB,KAAA;IACA;IACAtB,MAAA;MACA,KAAAsB,KAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}