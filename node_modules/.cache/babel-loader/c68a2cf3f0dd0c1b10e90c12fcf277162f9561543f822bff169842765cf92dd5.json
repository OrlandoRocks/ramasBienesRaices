{"ast":null,"code":"import \"d3\";\nimport * as d3 from \"d3\";\nimport \"topojson\";\nimport DataMap from \"datamaps\";\nimport { throttle } from \"src/util/throttle\";\nexport default {\n  data() {\n    return {\n      color1: \"#AAAAAA\",\n      color2: \"#444444\",\n      highlightFillColor: \"#66615B\",\n      borderColor: \"#3c3c3c\",\n      highlightBorderColor: \"#3c3c3c\",\n      mapData: {\n        AUS: 760,\n        BRA: 550,\n        CAN: 120,\n        DEU: 1300,\n        FRA: 540,\n        GBR: 690,\n        GEO: 200,\n        IND: 200,\n        ROU: 600,\n        RUS: 300,\n        USA: 2920\n      }\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3.scaleLinear().domain([0, length]).range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: \"#e4e4e4\"\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val\n        };\n      }\n      return {\n        mapData,\n        fills\n      };\n    },\n    initVectorMap() {\n      let {\n        fills,\n        mapData\n      } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: \"world\",\n        element: document.getElementById(\"worldMap\"),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 0.5,\n          borderOpacity: 0.8,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 0.5,\n          highlightBorderOpacity: 0.8\n        }\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\"resize\", () => {\n        throttle(resizeFunc, 40);\n      }, false);\n    }\n  },\n  async mounted() {\n    this.initVectorMap();\n  }\n};","map":{"version":3,"names":["d3","DataMap","throttle","data","color1","color2","highlightFillColor","borderColor","highlightBorderColor","mapData","AUS","BRA","CAN","DEU","FRA","GBR","GEO","IND","ROU","RUS","USA","methods","generateColors","length","scaleLinear","domain","range","generateMapColors","mapDataValues","Object","values","maxVal","Math","max","colors","fills","defaultFill","key","val","fillKey","value","initVectorMap","worldMap","scope","element","document","getElementById","responsive","geographyConfig","borderWidth","borderOpacity","highlightBorderWidth","highlightBorderOpacity","resizeFunc","resize","bind","window","addEventListener","mounted"],"sources":["src/components/WorldMap/WorldMap.vue"],"sourcesContent":["<template>\n  <div id=\"worldMap\" style=\"height: 300px\"></div>\n</template>\n<script>\nimport \"d3\";\nimport * as d3 from \"d3\";\nimport \"topojson\";\nimport DataMap from \"datamaps\";\nimport { throttle } from \"src/util/throttle\";\n\nexport default {\n  data() {\n    return {\n      color1: \"#AAAAAA\",\n      color2: \"#444444\",\n      highlightFillColor: \"#66615B\",\n      borderColor: \"#3c3c3c\",\n      highlightBorderColor: \"#3c3c3c\",\n      mapData: {\n        AUS: 760,\n        BRA: 550,\n        CAN: 120,\n        DEU: 1300,\n        FRA: 540,\n        GBR: 690,\n        GEO: 200,\n        IND: 200,\n        ROU: 600,\n        RUS: 300,\n        USA: 2920,\n      },\n    };\n  },\n  methods: {\n    generateColors(length) {\n      return d3\n        .scaleLinear()\n        .domain([0, length])\n        .range([this.color1, this.color2]);\n    },\n    generateMapColors() {\n      let mapDataValues = Object.values(this.mapData);\n      let maxVal = Math.max(...mapDataValues);\n      let colors = this.generateColors(maxVal);\n      let mapData = {};\n      let fills = {\n        defaultFill: \"#e4e4e4\",\n      };\n      for (let key in this.mapData) {\n        let val = this.mapData[key];\n        fills[key] = colors(val);\n        mapData[key] = {\n          fillKey: key,\n          value: val,\n        };\n      }\n      return {\n        mapData,\n        fills,\n      };\n    },\n    initVectorMap() {\n      let { fills, mapData } = this.generateMapColors();\n      let worldMap = new DataMap({\n        scope: \"world\",\n        element: document.getElementById(\"worldMap\"),\n        fills,\n        data: mapData,\n        responsive: true,\n        geographyConfig: {\n          borderColor: this.borderColor,\n          borderWidth: 0.5,\n          borderOpacity: 0.8,\n          highlightFillColor: this.highlightFillColor,\n          highlightBorderColor: this.highlightBorderColor,\n          highlightBorderWidth: 0.5,\n          highlightBorderOpacity: 0.8,\n        },\n      });\n      let resizeFunc = worldMap.resize.bind(worldMap);\n      window.addEventListener(\n        \"resize\",\n        () => {\n          throttle(resizeFunc, 40);\n        },\n        false\n      );\n    },\n  },\n  async mounted() {\n    this.initVectorMap();\n  },\n};\n</script>\n<style></style>\n"],"mappings":"AAIA;AACA,YAAAA,EAAA;AACA;AACA,OAAAC,OAAA;AACA,SAAAC,QAAA;AAEA;EACAC,KAAA;IACA;MACAC,MAAA;MACAC,MAAA;MACAC,kBAAA;MACAC,WAAA;MACAC,oBAAA;MACAC,OAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;QACAC,GAAA;MACA;IACA;EACA;EACAC,OAAA;IACAC,eAAAC,MAAA;MACA,OAAAvB,EAAA,CACAwB,WAAA,GACAC,MAAA,KAAAF,MAAA,GACAG,KAAA,OAAAtB,MAAA,OAAAC,MAAA;IACA;IACAsB,kBAAA;MACA,IAAAC,aAAA,GAAAC,MAAA,CAAAC,MAAA,MAAArB,OAAA;MACA,IAAAsB,MAAA,GAAAC,IAAA,CAAAC,GAAA,IAAAL,aAAA;MACA,IAAAM,MAAA,QAAAZ,cAAA,CAAAS,MAAA;MACA,IAAAtB,OAAA;MACA,IAAA0B,KAAA;QACAC,WAAA;MACA;MACA,SAAAC,GAAA,SAAA5B,OAAA;QACA,IAAA6B,GAAA,QAAA7B,OAAA,CAAA4B,GAAA;QACAF,KAAA,CAAAE,GAAA,IAAAH,MAAA,CAAAI,GAAA;QACA7B,OAAA,CAAA4B,GAAA;UACAE,OAAA,EAAAF,GAAA;UACAG,KAAA,EAAAF;QACA;MACA;MACA;QACA7B,OAAA;QACA0B;MACA;IACA;IACAM,cAAA;MACA;QAAAN,KAAA;QAAA1B;MAAA,SAAAkB,iBAAA;MACA,IAAAe,QAAA,OAAAzC,OAAA;QACA0C,KAAA;QACAC,OAAA,EAAAC,QAAA,CAAAC,cAAA;QACAX,KAAA;QACAhC,IAAA,EAAAM,OAAA;QACAsC,UAAA;QACAC,eAAA;UACAzC,WAAA,OAAAA,WAAA;UACA0C,WAAA;UACAC,aAAA;UACA5C,kBAAA,OAAAA,kBAAA;UACAE,oBAAA,OAAAA,oBAAA;UACA2C,oBAAA;UACAC,sBAAA;QACA;MACA;MACA,IAAAC,UAAA,GAAAX,QAAA,CAAAY,MAAA,CAAAC,IAAA,CAAAb,QAAA;MACAc,MAAA,CAAAC,gBAAA,CACA,UACA;QACAvD,QAAA,CAAAmD,UAAA;MACA,GACA,KACA;IACA;EACA;EACA,MAAAK,QAAA;IACA,KAAAjB,aAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}