{"ast":null,"code":"import _Tag2 from \"element-ui/lib/theme-chalk/tag.css\";\nimport \"element-ui/lib/theme-chalk/base.css\";\nimport _Tag from \"element-ui/lib/tag\";\nexport default {\n  name: \"tags-input\",\n  components: {\n    [_Tag.name]: _Tag\n  },\n  props: {\n    value: {\n      type: Array,\n      default: () => [],\n      description: \"List of tags\"\n    },\n    tagType: {\n      type: String,\n      default: \"primary\",\n      description: \"Tag type (primary|danger etc)\"\n    }\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\"\n  },\n  data() {\n    return {\n      dynamicTags: [],\n      inputVisible: false,\n      inputValue: \"\"\n    };\n  },\n  methods: {\n    handleClose(tag) {\n      this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      this.$emit(\"change\", this.dynamicTags);\n    },\n    showInput() {\n      this.inputVisible = true;\n      this.$nextTick(() => {\n        this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleInputConfirm() {\n      let inputValue = this.inputValue;\n      if (inputValue) {\n        this.dynamicTags.push(inputValue);\n        this.$emit(\"change\", this.dynamicTags);\n      }\n      this.inputVisible = false;\n      this.inputValue = \"\";\n    },\n    onInput(evt) {\n      this.$emit(\"input\", evt.target.value);\n    }\n  },\n  created() {\n    this.$watch(\"value\", newVal => {\n      this.dynamicTags = [...newVal];\n    }, {\n      immediate: true\n    });\n  }\n};","map":{"version":3,"names":["name","components","_Tag","props","value","type","Array","default","description","tagType","String","model","prop","event","data","dynamicTags","inputVisible","inputValue","methods","handleClose","tag","splice","indexOf","$emit","showInput","$nextTick","$refs","saveTagInput","input","focus","handleInputConfirm","push","onInput","evt","target","created","$watch","newVal","immediate"],"sources":["src/components/Inputs/TagsInput.vue"],"sourcesContent":["<template>\n  <div>\n    <el-tag\n      v-for=\"(tag, index) in dynamicTags\"\n      :key=\"tag + index\"\n      size=\"small\"\n      :type=\"tagType\"\n      :closable=\"true\"\n      :close-transition=\"false\"\n      @close=\"handleClose(tag)\"\n    >\n      {{ tag }}\n    </el-tag>\n\n    <input\n      type=\"text\"\n      placeholder=\"Add new tag\"\n      class=\"form-control input-new-tag\"\n      v-model=\"inputValue\"\n      ref=\"saveTagInput\"\n      size=\"mini\"\n      @input=\"onInput\"\n      @keyup.enter=\"handleInputConfirm\"\n      @blur=\"handleInputConfirm\"\n    />\n  </div>\n</template>\n\n<script>\nimport { Tag } from \"element-ui\";\n\nexport default {\n  name: \"tags-input\",\n  components: {\n    [Tag.name]: Tag,\n  },\n  props: {\n    value: {\n      type: Array,\n      default: () => [],\n      description: \"List of tags\",\n    },\n    tagType: {\n      type: String,\n      default: \"primary\",\n      description: \"Tag type (primary|danger etc)\",\n    },\n  },\n  model: {\n    prop: \"value\",\n    event: \"change\",\n  },\n  data() {\n    return {\n      dynamicTags: [],\n      inputVisible: false,\n      inputValue: \"\",\n    };\n  },\n  methods: {\n    handleClose(tag) {\n      this.dynamicTags.splice(this.dynamicTags.indexOf(tag), 1);\n      this.$emit(\"change\", this.dynamicTags);\n    },\n    showInput() {\n      this.inputVisible = true;\n      this.$nextTick(() => {\n        this.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n\n    handleInputConfirm() {\n      let inputValue = this.inputValue;\n      if (inputValue) {\n        this.dynamicTags.push(inputValue);\n        this.$emit(\"change\", this.dynamicTags);\n      }\n      this.inputVisible = false;\n      this.inputValue = \"\";\n    },\n    onInput(evt) {\n      this.$emit(\"input\", evt.target.value);\n    },\n  },\n  created() {\n    this.$watch(\n      \"value\",\n      (newVal) => {\n        this.dynamicTags = [...newVal];\n      },\n      { immediate: true }\n    );\n  },\n};\n</script>\n"],"mappings":";;;AA+BA;EACAA,IAAA;EACAC,UAAA;IACA,CAAAC,IAAA,CAAAF,IAAA,GAAAE;EACA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,KAAA;MACAC,OAAA,EAAAA,CAAA;MACAC,WAAA;IACA;IACAC,OAAA;MACAJ,IAAA,EAAAK,MAAA;MACAH,OAAA;MACAC,WAAA;IACA;EACA;EACAG,KAAA;IACAC,IAAA;IACAC,KAAA;EACA;EACAC,KAAA;IACA;MACAC,WAAA;MACAC,YAAA;MACAC,UAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAAC,GAAA;MACA,KAAAL,WAAA,CAAAM,MAAA,MAAAN,WAAA,CAAAO,OAAA,CAAAF,GAAA;MACA,KAAAG,KAAA,gBAAAR,WAAA;IACA;IACAS,UAAA;MACA,KAAAR,YAAA;MACA,KAAAS,SAAA;QACA,KAAAC,KAAA,CAAAC,YAAA,CAAAD,KAAA,CAAAE,KAAA,CAAAC,KAAA;MACA;IACA;IAEAC,mBAAA;MACA,IAAAb,UAAA,QAAAA,UAAA;MACA,IAAAA,UAAA;QACA,KAAAF,WAAA,CAAAgB,IAAA,CAAAd,UAAA;QACA,KAAAM,KAAA,gBAAAR,WAAA;MACA;MACA,KAAAC,YAAA;MACA,KAAAC,UAAA;IACA;IACAe,QAAAC,GAAA;MACA,KAAAV,KAAA,UAAAU,GAAA,CAAAC,MAAA,CAAA9B,KAAA;IACA;EACA;EACA+B,QAAA;IACA,KAAAC,MAAA,CACA,SACAC,MAAA;MACA,KAAAtB,WAAA,OAAAsB,MAAA;IACA,GACA;MAAAC,SAAA;IAAA,CACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}