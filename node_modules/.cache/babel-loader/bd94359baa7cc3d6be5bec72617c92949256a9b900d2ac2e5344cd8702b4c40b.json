{"ast":null,"code":"import { throttle } from \"./throttle\";\nexport default {\n  name: \"simple-wizard\",\n  props: {\n    startIndex: {\n      type: Number,\n      default: 0\n    },\n    title: {\n      type: String,\n      default: \"Title\"\n    },\n    subTitle: {\n      type: String,\n      default: \"Subtitle\"\n    },\n    prevButtonText: {\n      type: String,\n      default: \"Previous\"\n    },\n    nextButtonText: {\n      type: String,\n      default: \"Next\"\n    },\n    finishButtonText: {\n      type: String,\n      default: \"Finish\"\n    },\n    vertical: {\n      type: Boolean\n    }\n  },\n  components: {\n    TabItemContent: {\n      functional: true,\n      props: [\"tab\"],\n      render(h, {\n        props\n      }) {\n        let content = props.tab.$slots.label;\n        if (content && content.length) {\n          return content;\n        }\n        return h(\"span\", [props.tab.$slots.label, props.tab.label]);\n      }\n    }\n  },\n  provide() {\n    return {\n      addTab: this.addTab,\n      removeTab: this.removeTab\n    };\n  },\n  data() {\n    return {\n      tabs: [],\n      activeTabIndex: 0,\n      tabLinkWidth: 0,\n      tabLinkHeight: 50\n    };\n  },\n  computed: {\n    tabCount() {\n      return this.tabs.length;\n    },\n    linkWidth() {\n      let width = 100;\n      if (this.tabCount > 0) {\n        width = 100 / this.tabCount;\n      }\n      if (this.vertical) {\n        width = 100;\n      }\n      return {\n        width: `${width}%`\n      };\n    },\n    activeTab() {\n      return this.tabs[this.activeTabIndex];\n    },\n    stepPercentage() {\n      return 1 / (this.tabCount * 2) * 100;\n    },\n    progress() {\n      let percentage = 0;\n      if (this.activeTabIndex > 0) {\n        let stepsToAdd = 1;\n        let stepMultiplier = 2;\n        percentage = this.stepPercentage * (this.activeTabIndex * stepMultiplier + stepsToAdd);\n      } else {\n        percentage = this.stepPercentage;\n      }\n      return percentage;\n    }\n  },\n  methods: {\n    addTab(tab) {\n      const index = this.$slots.default.indexOf(tab.$vnode);\n      let tabTitle = tab.title || \"\";\n      tab.tabId = `${tabTitle.replace(/ /g, \"\")}${index}`;\n      if (!this.activeTab && index === 0) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      if (this.activeTab === tab.name) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      this.tabs.splice(index, 0, tab);\n    },\n    removeTab(tab) {\n      const tabs = this.tabs;\n      const index = tabs.indexOf(tab);\n      if (index > -1) {\n        tabs.splice(index, 1);\n      }\n    },\n    validate(tab) {\n      let tabToValidate = tab || this.activeTab;\n      let beforeChange = tabToValidate.beforeChange;\n      if (beforeChange) {\n        return Promise.resolve(beforeChange()).then(res => {\n          this.activeTab.hasError = res ? false : true;\n          return res;\n        }).catch(() => {\n          this.activeTab.hasError = true;\n        });\n      } else {\n        return Promise.resolve(true);\n      }\n    },\n    async nextTab() {\n      let isValid = await this.validate();\n      if (isValid && this.activeTabIndex < this.tabCount - 1) {\n        this.activeTabIndex++;\n      }\n      return isValid;\n    },\n    prevTab() {\n      this.activeTabIndex--;\n    },\n    async navigateToTab(index) {\n      if (this.tabs[index].checked) {\n        // recursively validate each tab\n        if (index > this.activeTabIndex) {\n          let valid = await this.nextTab();\n          if (valid) {\n            this.navigateToTab(index);\n          }\n        } else {\n          this.activeTabIndex = index;\n        }\n      }\n    },\n    onResize() {\n      let tabLinks = document.getElementsByClassName(\"wizard-tab-link\");\n      if (tabLinks.length > 0 && this.tabCount > 0) {\n        let {\n          clientWidth,\n          clientHeight\n        } = tabLinks[0];\n        this.tabLinkWidth = clientWidth;\n        this.tabLinkHeight = clientHeight;\n      }\n    }\n  },\n  mounted() {\n    this.activeTabIndex = this.startIndex;\n    this.$nextTick(() => {\n      this.tabs[this.activeTabIndex].active = true;\n      this.tabs[this.activeTabIndex].checked = true;\n      this.onResize();\n    });\n    window.addEventListener(\"resize\", () => {\n      throttle(this.onResize, 40);\n    }, false);\n  },\n  watch: {\n    activeTabIndex(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        let oldTab = this.tabs[oldValue];\n        let newTab = this.tabs[newValue];\n        oldTab.active = false;\n        newTab.active = true;\n        if (!newTab.checked) {\n          newTab.checked = true;\n        }\n        this.$emit(\"tab-change\", oldTab, newTab);\n        this.$emit(\"update:startIndex\", newValue);\n      }\n    }\n  }\n};","map":{"version":3,"names":["throttle","name","props","startIndex","type","Number","default","title","String","subTitle","prevButtonText","nextButtonText","finishButtonText","vertical","Boolean","components","TabItemContent","functional","render","h","content","tab","$slots","label","length","provide","addTab","removeTab","data","tabs","activeTabIndex","tabLinkWidth","tabLinkHeight","computed","tabCount","linkWidth","width","activeTab","stepPercentage","progress","percentage","stepsToAdd","stepMultiplier","methods","index","indexOf","$vnode","tabTitle","tabId","replace","active","checked","splice","validate","tabToValidate","beforeChange","Promise","resolve","then","res","hasError","catch","nextTab","isValid","prevTab","navigateToTab","valid","onResize","tabLinks","document","getElementsByClassName","clientWidth","clientHeight","mounted","$nextTick","window","addEventListener","watch","newValue","oldValue","oldTab","newTab","$emit"],"sources":["src/components/Wizard/Wizard.vue"],"sourcesContent":["<template>\n  <div class=\"wizard-container\">\n    <div class=\"card card-wizard active\" id=\"wizardProfile\">\n      <form @submit.prevent>\n        <!--\n          You can switch \" data-color=\"primary\" \"  with one of the next bright colors: \"green\", \"orange\", \"red\", \"blue\"\n        -->\n        <div class=\"card-header text-center\">\n          <slot name=\"header\">\n            <h3 v-if=\"title\" class=\"card-title\">{{ title }}</h3>\n            <h5 v-if=\"subTitle\" class=\"description\">{{ subTitle }}</h5>\n          </slot>\n\n          <div class=\"wizard-navigation\">\n            <div class=\"progress-with-circle\">\n              <div\n                class=\"progress-bar\"\n                role=\"progressbar\"\n                aria-valuenow=\"1\"\n                aria-valuemin=\"1\"\n                aria-valuemax=\"3\"\n                :style=\"{ width: `${progress}%` }\"\n              ></div>\n            </div>\n            <ul class=\"nav nav-pills\">\n              <li\n                v-for=\"(tab, index) in tabs\"\n                :key=\"tab.title\"\n                role=\"tab\"\n                :tabindex=\"tab.checked ? 0 : ''\"\n                :id=\"`step-${tab.tabId}`\"\n                :aria-controls=\"tab.tabId\"\n                :aria-disabled=\"!tab.active\"\n                :aria-selected=\"tab.active\"\n                :ref=\"`tab-${index}`\"\n                class=\"nav-item wizard-tab-link\"\n                :style=\"linkWidth\"\n              >\n                <a\n                  class=\"nav-link\"\n                  @click=\"navigateToTab(index)\"\n                  :class=\"[\n                    { 'disabled-wizard-link': !tab.checked },\n                    { active: tab.active },\n                    { checked: tab.checked },\n                  ]\"\n                  data-toggle=\"tab\"\n                >\n                  <tab-item-content :tab=\"tab\"></tab-item-content>\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div class=\"card-body\">\n          <div class=\"tab-content\">\n            <slot :activeIndex=\"activeTabIndex\" :activeTab=\"activeTab\"> </slot>\n          </div>\n        </div>\n\n        <div class=\"card-footer\">\n          <slot name=\"footer\" :next-tab=\"nextTab\" :prev-tab=\"prevTab\">\n            <div class=\"pull-right\">\n              <base-button\n                v-if=\"activeTabIndex < tabCount - 1\"\n                type=\"primary\"\n                wide\n                @click.native=\"nextTab\"\n                class=\"btn-next\"\n              >\n                {{ nextButtonText }}\n              </base-button>\n              <base-button v-else wide @click.native=\"nextTab\">{{\n                finishButtonText\n              }}</base-button>\n            </div>\n\n            <div class=\"pull-left\">\n              <base-button\n                v-if=\"activeTabIndex > 0\"\n                wide\n                type=\"primary\"\n                @click.native=\"prevTab\"\n                class=\"btn-previous\"\n              >\n                {{ prevButtonText }}\n              </base-button>\n            </div>\n            <div class=\"clearfix\"></div>\n          </slot>\n        </div>\n      </form>\n    </div>\n  </div>\n</template>\n<script>\nimport { throttle } from \"./throttle\";\n\nexport default {\n  name: \"simple-wizard\",\n  props: {\n    startIndex: {\n      type: Number,\n      default: 0,\n    },\n    title: {\n      type: String,\n      default: \"Title\",\n    },\n    subTitle: {\n      type: String,\n      default: \"Subtitle\",\n    },\n    prevButtonText: {\n      type: String,\n      default: \"Previous\",\n    },\n    nextButtonText: {\n      type: String,\n      default: \"Next\",\n    },\n    finishButtonText: {\n      type: String,\n      default: \"Finish\",\n    },\n    vertical: {\n      type: Boolean,\n    },\n  },\n  components: {\n    TabItemContent: {\n      functional: true,\n      props: [\"tab\"],\n      render(h, { props }) {\n        let content = props.tab.$slots.label;\n        if (content && content.length) {\n          return content;\n        }\n        return h(\"span\", [props.tab.$slots.label, props.tab.label]);\n      },\n    },\n  },\n  provide() {\n    return {\n      addTab: this.addTab,\n      removeTab: this.removeTab,\n    };\n  },\n  data() {\n    return {\n      tabs: [],\n      activeTabIndex: 0,\n      tabLinkWidth: 0,\n      tabLinkHeight: 50,\n    };\n  },\n  computed: {\n    tabCount() {\n      return this.tabs.length;\n    },\n    linkWidth() {\n      let width = 100;\n      if (this.tabCount > 0) {\n        width = 100 / this.tabCount;\n      }\n      if (this.vertical) {\n        width = 100;\n      }\n      return { width: `${width}%` };\n    },\n    activeTab() {\n      return this.tabs[this.activeTabIndex];\n    },\n    stepPercentage() {\n      return (1 / (this.tabCount * 2)) * 100;\n    },\n    progress() {\n      let percentage = 0;\n      if (this.activeTabIndex > 0) {\n        let stepsToAdd = 1;\n        let stepMultiplier = 2;\n        percentage =\n          this.stepPercentage *\n          (this.activeTabIndex * stepMultiplier + stepsToAdd);\n      } else {\n        percentage = this.stepPercentage;\n      }\n      return percentage;\n    },\n  },\n  methods: {\n    addTab(tab) {\n      const index = this.$slots.default.indexOf(tab.$vnode);\n      let tabTitle = tab.title || \"\";\n      tab.tabId = `${tabTitle.replace(/ /g, \"\")}${index}`;\n      if (!this.activeTab && index === 0) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      if (this.activeTab === tab.name) {\n        tab.active = true;\n        tab.checked = true;\n      }\n      this.tabs.splice(index, 0, tab);\n    },\n    removeTab(tab) {\n      const tabs = this.tabs;\n      const index = tabs.indexOf(tab);\n      if (index > -1) {\n        tabs.splice(index, 1);\n      }\n    },\n    validate(tab) {\n      let tabToValidate = tab || this.activeTab;\n      let beforeChange = tabToValidate.beforeChange;\n      if (beforeChange) {\n        return Promise.resolve(beforeChange())\n          .then((res) => {\n            this.activeTab.hasError = res ? false : true;\n            return res;\n          })\n          .catch(() => {\n            this.activeTab.hasError = true;\n          });\n      } else {\n        return Promise.resolve(true);\n      }\n    },\n    async nextTab() {\n      let isValid = await this.validate();\n      if (isValid && this.activeTabIndex < this.tabCount - 1) {\n        this.activeTabIndex++;\n      }\n      return isValid;\n    },\n    prevTab() {\n      this.activeTabIndex--;\n    },\n    async navigateToTab(index) {\n      if (this.tabs[index].checked) {\n        // recursively validate each tab\n        if (index > this.activeTabIndex) {\n          let valid = await this.nextTab();\n          if (valid) {\n            this.navigateToTab(index);\n          }\n        } else {\n          this.activeTabIndex = index;\n        }\n      }\n    },\n    onResize() {\n      let tabLinks = document.getElementsByClassName(\"wizard-tab-link\");\n      if (tabLinks.length > 0 && this.tabCount > 0) {\n        let { clientWidth, clientHeight } = tabLinks[0];\n        this.tabLinkWidth = clientWidth;\n        this.tabLinkHeight = clientHeight;\n      }\n    },\n  },\n  mounted() {\n    this.activeTabIndex = this.startIndex;\n    this.$nextTick(() => {\n      this.tabs[this.activeTabIndex].active = true;\n      this.tabs[this.activeTabIndex].checked = true;\n      this.onResize();\n    });\n    window.addEventListener(\n      \"resize\",\n      () => {\n        throttle(this.onResize, 40);\n      },\n      false\n    );\n  },\n  watch: {\n    activeTabIndex(newValue, oldValue) {\n      if (newValue !== oldValue) {\n        let oldTab = this.tabs[oldValue];\n        let newTab = this.tabs[newValue];\n        oldTab.active = false;\n        newTab.active = true;\n\n        if (!newTab.checked) {\n          newTab.checked = true;\n        }\n        this.$emit(\"tab-change\", oldTab, newTab);\n        this.$emit(\"update:startIndex\", newValue);\n      }\n    },\n  },\n};\n</script>\n<style lang=\"scss\">\n/* Tab content animation */\n.tab-content {\n  display: flex; // to avoid horizontal scroll when animating\n  .tab-pane {\n    display: block;\n    animation: fadeIn 0.5s;\n    width: 100%;\n  }\n}\n\n/**\n      Extra niceties. Display error tabs and disable navigation unvisited tabs\n     */\n.wizard-navigation .nav-link {\n  &.active,\n  &.checked {\n    cursor: pointer;\n  }\n}\n\n.disabled-wizard-link {\n  cursor: not-allowed;\n}\n</style>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}